#! /usr/bin/perl -w

use strict;
use Device::SerialPort;
use Net::TFTPd;
use Net::Ifconfig::Wrapper qw(Ifconfig);
use LWP::Simple;
use IO::Handle;
use File::stat;
use Thread;
use Expect;

#$Expect::Exp_Internal = 1;
#$Expect::Debug = 1;

my $HOST_NETIF = "eth0";

my $DL_DIR = "/tmp";
my $DATA_DIR = "/var/lib/ohsheeva";

my $PORT = "/dev/ttyUSB0";
my $USERNAME = "root";
my $PASSWD = "openhome";

my $UPDATE_URL = "http://10.201.0.13/openhome/nightly/main";
my $UBOOT_FILE = "u-boot.kwb";
my $KERNEL_FILE = "main.uImage";
my $ROOTFS_FILE = "main.ubi.img";

my $DL_ADDR_0 = "0x800000";
my $DL_ADDR_1 = "0xB00000";

my $REBOOT_TIMEOUT = 40;
my $CMD_TIMEOUT = 20;
my $TFTPD_TIMEOUT = 10;

my $s_obj;
my $mac_addr;

# 
# Get our IP address
#
my $if_conf = Ifconfig('list', '', '', '') or die $@;
scalar(keys(%{$if_conf})) 
    or die "No host network interfaces found. Something wrong?\n";
$if_conf->{$HOST_NETIF} or die "Could not find host interface $HOST_NETIF\n";
my @host_ip = keys(%{$if_conf->{$HOST_NETIF}{'inet'}});

#
# Print some info
#
print "\n";
print "Host: $host_ip[0]\n";
print "Serial device: $PORT\n";
print "Download dir: $DL_DIR\n";
print "Firmware URL: $UPDATE_URL\n";


#
# Download firmware images
#
print "\nDownloading firmware files. This may take a while ...\n";
my ($file, $status);
foreach $file ($UBOOT_FILE, $KERNEL_FILE, $ROOTFS_FILE) {
    $status = getstore("$UPDATE_URL/$file", "$DL_DIR/$file");
    die "Firmware download failed with error: ", $status, "\n" if is_error($status);
}
exit 0;

#
# Prompt the user to get started
#
print "\n";
if (-c $PORT) {
    print "Please power off the Sheevaplug ...\n\n"
}
while (-c $PORT) {}

print "Connect Sheeva console cable and then power on the unit ...\n\n";
while  (! -c $PORT) {}

sleep(1);

#
# Configure and open the serial port
#
$s_obj = new Device::SerialPort($PORT);

$s_obj->baudrate(115200) || die "failed setting baudrate"; 
$s_obj->parity("none") || die "failed setting parity"; 
$s_obj->databits(8) || die "failed setting databits"; 
$s_obj->stopbits(1) || die "failed setting stopbits";
$s_obj->handshake("none") || die "failed setting handshake"; 

$s_obj->write_settings || die "no settings"; 

undef $s_obj;

open(FD, "+<$PORT") or die "Failed to open port: $PORT";
FD->autoflush(1);

my $exp = Expect->exp_init(\*FD);


# Set to 1 to get all console traffic to standard output
$exp->log_stdout(1);
$exp->log_group(1);


#
# Various subroutines
#

# Breaks into the U-Boot prompt
sub get_uboot_prompt
{

    $exp->expect($REBOOT_TIMEOUT,
             [ qr/U-Boot +((20\d{2}\.\d{2})|(\d\.\d\.\d))\S*/i, sub { my $fh = shift;
                                         print "Bootloader: ", $fh->match, "\n";
                                         exp_continue; } ],
             [ qr/Hit\s+any\skey\s+to\s+stop\s+autoboot/i, sub { my $fh = shift;
                                                        $fh->send("\n"); 
                                                        exp_continue_timeout; } ],
             [ eof => sub { die "ERROR: EOF trying to get U-Boot prompt.\n"; } ],
             [ timeout => sub { die "ERROR: timeout trying to get U-Boot prompt.\n"; } ],
             '-re', 'Marvell>> $'
          );
    $exp->clear_accum; 
}

# Function for the TFTP server thread
sub tftp_server 
{
    my $tftp_file = shift;

    my $tftp_srv = Net::TFTPd->new('FileName' => $tftp_file, 
                                   'LocalAddr' => $host_ip[0],
                                   'Timeout' => $TFTPD_TIMEOUT);
    die "ERROR: failed to create TFTP server\n" unless (defined $tftp_srv);

    my $tftp_rq = $tftp_srv->waitRQ
            or die "ERROR: while waiting for TFTP request\n";

    $tftp_rq->processRQ()
           or die "ERROR: processing TFTP request\n";

    undef $tftp_rq;
    undef $tftp_srv;
};


# Upload a file to the Sheevaplug using TFTP and U-Boot
sub tftp_upload
{
    my $file = shift;
    my $dl_addr = shift;
    my $file_stat = stat($file)
                    or die "Could not stat $file\n";
    # Enable DHCP on the unit
    $exp->send("dhcp\n");
    $exp->expect($CMD_TIMEOUT,
                 [ qr'(\d{1,2}\.){3}\d{1,2}', sub { exp_continue; } ],
                 [ eof => sub { die "ERROR: EOF trying to enable Sheeva DHCP.\n"; } ],
                 [ timeout => sub { die "ERROR: timeout trying to enable Sheeva DHCP.\n"; } ],
                 '-re', 'Marvell>> $'
             );
    $exp->clear_accum;
    # Start the TFTP server thread
    my $srv_thr = new Thread \&tftp_server, $file
               or die "Failed to create TFTP server thread\n"; 
    sleep(1);
    # Transfer the file
    $exp->send("tftp $dl_addr $host_ip[0]:$file\n");
    $exp->expect($CMD_TIMEOUT,
                 [ qr'done\s+$', sub { exp_continue_timeout; } ],
                 [ qr/Bytes\s+transferred\s*=\s*\d+/i, sub { my $fh = shift;
                                                             $fh->match =~ /\s*=\s*(\d+)/;
                                                             unless ($1 == $file_stat->size) {
                                                                $srv_thr->join;
                                                                die "Failed to upload file (", $1, "/", $file_stat->size, ")\n";
                                                             }  
                                                             print "Done: $1 bytes transferred\n";
                                                             exp_continue_timeout; } ],
                 [ eof => sub {  $srv_thr->join; die "ERROR: EOF uploading file.\n"; } ],
                 [ timeout => sub { $srv_thr->join; die "ERROR: timeout uploading file.\n"; } ],
                 '-re', 'Marvell>>\s+$'
             );
    $exp->clear_accum;
    $srv_thr->join;
}


#
#  Start of main configuration thread
#

# Stop the U-Boot autoboot so that we can upgrade the bootloader
get_uboot_prompt;   

# Get the MAC address
$exp->send("printenv ethaddr\n");
$exp->expect($CMD_TIMEOUT,
             [ qr/([0-9a-f]{2}:){5}[0-9a-f]{2}/i, sub { my $fh = shift;
                                                        $mac_addr = $fh->match;
                                                        print "MAC: $mac_addr\n";
                                                        exp_continue_timeout; } ],
             [ eof => sub { die "ERROR: EOF trying to get MAC address.\n"; } ],
             [ timeout => sub { die "ERROR: timeout trying to get MAC address.\n"; } ],
             '-re', 'Marvell>> $'
         );
$exp->clear_accum;

#
# Upgrade U-Boot using TFTP
#
print "\nUpgrading bootloader ...\n";
tftp_upload "$DL_DIR/$UBOOT_FILE", $DL_ADDR_0;
# Erase the u-boot NAND partition
print "Reprogramming bootloader flash partition ...\n";
$exp->send("nand erase 0x0 0x80000\n");
$exp->expect($CMD_TIMEOUT,
             [ qr'OK\s+$', sub { exp_continue_timeout; } ],
             [ eof => sub {  die "ERROR: EOF erasing bootloader partition.\n"; } ],
             [ timeout => sub { die "ERROR: timeout erasing bootloader partition.\n"; } ],
             '-re', 'Marvell>>\s+$'
            );
$exp->clear_accum;
# Program NAND with the new u-boot image
$exp->send("nand write $DL_ADDR_0 0x0 0x60000\n");
$exp->expect($CMD_TIMEOUT,
             [ qr'OK\s+$', sub { exp_continue_timeout; } ],
             [ eof => sub {  die "ERROR: EOF programming bootloader partition.\n"; } ],
             [ timeout => sub { die "ERROR: timeout programming bootloader partition.\n"; } ],
             '-re', 'Marvell>>\s+$'
            );
$exp->clear_accum;
print "Success!\n";
# Reboot into the new version
print "Starting the new bootloader ...\n";
$exp->send("reset\n");
get_uboot_prompt;
print "Restoring MAC address ...\n";
# Restore the MAC address
$exp->send("setenv ethaddr $mac_addr; saveenv\n");
$exp->clear_accum;
# Reboot again for the new MAC address to take effect
$exp->send("reset\n");
get_uboot_prompt;
# Verify MAC address
$exp->send("printenv ethaddr\n");
$exp->expect($CMD_TIMEOUT,
             [ qr/([0-9a-f]{2}:){5}[0-9a-f]{2}/i, sub { my $fh = shift;
                                                        die "Failed to restore unit MAC address\n"
                                                                 unless ($fh->match eq $mac_addr);
                                                        exp_continue_timeout; } ],
             [ eof => sub {  die "ERROR: EOF verifying MAC address.\n"; } ],
             [ timeout => sub { die "ERROR: timeout verifying MAC address.\n"; } ],
             '-re', 'Marvell>>\s+$'
            );


#
# Upload the kernel and ramdisk
#
print "Uploading Linux kernel and ramdisk\n";
tftp_upload "$DL_DIR/$KERNEL_FILE", $DL_ADDR_0;


                                                    
# Login to the unit
print "Waiting for login prompt ...\n";
$exp->send("boot\n");
$exp->expect($REBOOT_TIMEOUT,
             [ qr/login: $/i, sub { my $fh = shift;
                                    print "Logging in ...\n";
                                    $fh->send("$USERNAME\n");
                                    exp_continue_timeout; } ],
             [ qr/Password: $/i, sub { my $fh = shift;
                                      $fh->send("$PASSWD\n");
                                      exp_continue_timeout; } ],
             [ eof => sub { die "ERROR: EOF trying to login.\n"; } ],
             [ timeout => sub { die "ERROR: timeout trying to login.\n"; } ],
             '-re', '\w+@?\w+.*# $'
       );
$exp->clear_accum;
print "Done\n\n";




                   
